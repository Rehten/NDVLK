Этот файл нужен больше для того, чтобы незнакомому человеку было проще разобраться в проекте. Здесь я объясню, почему я делаю именно так, а не иначе

Здесь содержатся типы/интерфейсы для элементов, которые могут использоваться в корневом модуле и во всем остальном приложении(особенно в модуле shared)
Нужны для того, чтобы отделить уровень интерфейсов от уровня реализации, и минимизировать побочные эффекты(side-effects)

FAQ:
Q - Нахуа?
A - На основе этих типов будет работать почти все приложение - нужно объединить их в одной папке

Q - Наследование абстрактных классов круче
A - 1) неопределенная ситуевина с lazy loading 2)Код будет написан в новомодном Functional Reactive стиле (RxJS) - для этого используются совершенно другие приемы 3)Интерфейс это тот же абстрактный класс, поддерживающий множественное наследование

Q - Почему дженерики? Сложно, непонятно, перегруженный синтаксис.
A - См. 'Чистая функция', 'Обобщенное программирование' - если вкратце - то почти пропадает потребность в юнит тестах, высокая гарантия надежности кода(если не учитывать ошибки при написании)

Q - Есть Solid, Grasp и вообще на моем ${oop_programming_language} так пишут только джуны
A - https://habr.com/ru/post/122665/ - долларовый миллионер, создатель stackoverflow   https://habr.com/ru/company/hexlet/blog/248921/ - ученый, который начинал заниматься айти с 1950-х - и, мое любимое - https://github.com/id-Software/Quake-2  - ребята не очень поняли ооп, используют goto, но сделали шедевр

Q - Я бы сделал проще! больно много написания кода ради самого кода!!!
A - Основная задача была минимизировать костыли с помощью абстракции. Если бы я знал, как решить ее более простым путем, я бы именно так и сделал.

Q - Angular - это ооп фреймворк! в нем нельзя писать в функциональном стиле!!!
A - см. RxJS, который встроен в Angular - идеальный баланс между функциональным программированием(композиция функций через pipe, функции высшего порядка, чистые функции) там, где оно нужно, и ооп(BehaviorSubject, Observer) там, где оно не нужно. ООП сейчас устаревает в пользу мультипарадигмальности.
